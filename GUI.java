    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rmr_esports;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.Color;

import java.util.*;
import java.io.*;

import java.awt.GridLayout;
/**
 *
 * @author home
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }
    
    private static ListNode[] lists = {null, null, null};
    private static ListNode[] tails = {null, null, null};
    private static DoubleNode games = null;
    private static DoubleNode games_tail = null;
    private static boolean eligibility_toggle = false;
    private static int game_index = 0; // determines which game is currently being selected
    private static String[] filepaths = {"src/rmr_esports/valorant_player_data.txt", "src/rmr_esports/lol_player_data.txt", "src/rmr_esports/csgo_player_data.txt"};
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addPlayer = new javax.swing.JButton();
        addGame = new javax.swing.JButton();
        update = new javax.swing.JButton();
        deletePlayer = new javax.swing.JButton();
        sortPoints = new javax.swing.JButton();
        toggleEligibility = new javax.swing.JButton();
        printGames = new javax.swing.JButton();
        gameSelect = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Bebas Neue", 1, 48)); // NOI18N
        jLabel1.setText("eSports Club Regional Rankings");

        addPlayer.setText("Add a Player");
        addPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerActionPerformed(evt);
            }
        });

        addGame.setText("Add a Game");
        addGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGameActionPerformed(evt);
            }
        });

        update.setText("Update Rankings");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        deletePlayer.setText("Delete a Player");
        deletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlayerActionPerformed(evt);
            }
        });

        sortPoints.setText("Sort by Points");
        sortPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPointsActionPerformed(evt);
            }
        });

        toggleEligibility.setText("Toggle Eligibility");
        toggleEligibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleEligibilityActionPerformed(evt);
            }
        });

        printGames.setText("Print Game History");
        printGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printGamesActionPerformed(evt);
            }
        });

        gameSelect.setBackground(new java.awt.Color(255, 200, 200));
        gameSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Valorant", "League of Legends", "CS:GO" }));
        gameSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortPoints)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toggleEligibility))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addGame)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printGames))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addPlayer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deletePlayer)))
                        .addGap(11, 11, 11)
                        .addComponent(gameSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addPlayer)
                            .addComponent(deletePlayer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addGame)
                            .addComponent(printGames, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(gameSelect)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update)
                    .addComponent(sortPoints)
                    .addComponent(toggleEligibility)))
        );

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerActionPerformed
        String name = JOptionPane.showInputDialog(null, "What is the player's name?", null);
        String grade_string = JOptionPane.showInputDialog(null, "What is their grade?", null);
        int grade = Integer.parseInt(grade_string);
        while (grade <= 8 || grade > 12) {
            grade_string = JOptionPane.showInputDialog(null, "What is their grade? Members must be high schoolers (9-12)", null);
            grade = Integer.parseInt(grade_string);
        }
        if (lists[game_index] == null) {
            lists[game_index] = new ListNode(new Player(name, grade), null);
            tails[game_index] = lists[game_index];
        } else {
            tails[game_index].setNext(new ListNode(new Player(name, grade), null));
            tails[game_index] = tails[game_index].getNext();
        }
        updateActionPerformed(evt);
    }//GEN-LAST:event_addPlayerActionPerformed

    private void addGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGameActionPerformed
      JTextField[] winning_player_names = new JTextField[5];
      for (int i = 0; i < winning_player_names.length; i++) {
          winning_player_names[i] = new JTextField(); 
      }

      JPanel myPanel = new JPanel();
      GridLayout layout = new GridLayout(0,2);
      myPanel.setLayout(layout);
      for (int i = 0; i < winning_player_names.length; i++) {
        myPanel.add(new JLabel("Player " + (i+1) + ": "));
        myPanel.add(winning_player_names[i]);
      }
      
      int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please Enter the Names of the Players on the Winning Team", JOptionPane.OK_CANCEL_OPTION);
      
      JTextField[] losing_player_names = new JTextField[5];
      for (int i = 0; i < losing_player_names.length; i++) {
          losing_player_names[i] = new JTextField(); 
      }

      myPanel = new JPanel();
      myPanel.setLayout(layout);
      for (int i = 0; i < losing_player_names.length; i++) {
        myPanel.add(new JLabel("Player " + (i+1) + ": "));
        myPanel.add(losing_player_names[i]);
      }
      
      result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please Enter the Names of the Players on the Losing Team", JOptionPane.OK_CANCEL_OPTION);
      
      for (JTextField j : winning_player_names) {
          String name = j.getText();
          ListNode current = lists[game_index];
          while (current != null) {
              if (current.get().getName().equals(name)) {
                  current.get().setPoints(current.get().getPoints() + 5);
                  break;
              }
              current = current.getNext();
          }
      }
      
      for (JTextField j : losing_player_names) {
          String name = j.getText();
          ListNode current = lists[game_index];
          while (current != null) {
              if (current.get().getName().equals(name)) {
                  current.get().setPoints(current.get().getPoints() + 2);
                  break;
              }
              current = current.getNext();
          }
      }
      
      Game this_game = new Game(gameSelect.getSelectedItem().toString(), winning_player_names, losing_player_names);
      if (games == null) {
          games = new DoubleNode(this_game, null, null);
          games_tail = games;
      } 
      else {
          DoubleNode temp = new DoubleNode(this_game, games_tail, null);
          games_tail.setNext(temp);
          games_tail = games_tail.getNext();
      }
      
      //clearTheFile("src/rmr_esports/player_data.txt");
      try {
          FileWriter fw = new FileWriter("src/rmr_esports/game_history.txt", true);
          fw.write(gameSelect.getSelectedItem() + ",");
          fw.write(this_game.game_index + ",");
          fw.write("w:{");
          for (int i = 0; i < winning_player_names.length; i++) {
              if (winning_player_names[i] != null) fw.write(winning_player_names[i].getText() + ", ");
          }
          fw.write("},l:{");
          for (int i = 0; i < losing_player_names.length; i++) {
              if (losing_player_names[i] != null) fw.write(losing_player_names[i].getText() + ", ");
          }
          fw.write("}\n");
          fw.close();
      } catch (IOException io) {
          System.out.println("oops!");
      }
      
      updateActionPerformed(evt);
    }//GEN-LAST:event_addGameActionPerformed

    private static void clearTheFile(String filename) {
        try{
            FileWriter fwOb = new FileWriter(filename, false); 
            PrintWriter pwOb = new PrintWriter(fwOb, false);
            pwOb.flush();
            pwOb.close();
            fwOb.close();
        } catch (IOException io) {
            System.out.println("oops");
        }
    }
    
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // find list length
        int count = 0;
        ArrayList<Integer> eligible_indices = new ArrayList<Integer>();
        ListNode current = lists[game_index]; 
        while (current != null) {
            count++;
            if (current.get().eligible) {
                eligible_indices.add(count-1);
            }
            current = current.getNext();
        }
        String[] list_contents = new String[count];
        clearTheFile(filepaths[game_index]);
        current = lists[game_index];
        int index = 0;
        try {
            FileWriter fw = new FileWriter(filepaths[game_index]);
            while (current != null) {
                list_contents[index] = current.toString();
                fw.write(current.get().getName() + "|" + current.get().getGrade() + "|" + current.get().getPoints() + "\n");
                current = current.getNext();
                index++;
            }
            fw.close();
        } catch (IOException io) {
            System.out.println("oops!");
        }
        jList1 = new javax.swing.JList<>();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = list_contents;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        
        if (eligibility_toggle) {
            /*
            int[] s_i = new int[count];
            for (int i = 0; i < count; i++) s_i[i] = i;
            jList1.setSelectedIndices(s_i);
            jList1.setSelectionBackground(Color.red);*/
            
            //jList1.clearSelection(); 
            
                    
            int[] s_i = new int[eligible_indices.size()];
            for (int i = 0; i < s_i.length; i++) {
                s_i[i] = Integer.valueOf(eligible_indices.get(i));
            }
            jList1.setSelectedIndices(s_i);
            jList1.setSelectionBackground(Color.green);
        }

        jScrollPane1.setViewportView(jList1);
    }//GEN-LAST:event_updateActionPerformed
    
    private void deletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlayerActionPerformed
        String name = JOptionPane.showInputDialog(null, "What is the player's name?", null);
        ListNode current = lists[game_index];
        while (current != null) {
            if (!current.get().getName().equals(name)) current = current.getNext();
            else break;
        }
        
        if (current == lists[game_index]) {
            lists[game_index] = lists[game_index].getNext();
        } else if (current == tails[game_index]) {
            current = lists[game_index]; 
            while (current.getNext() != tails[game_index]) current = current.getNext(); 
            tails[game_index] = current;
            current.setNext(null);
        } else {
            ListNode temp = lists[game_index];
            while (temp.getNext() != current) temp = temp.getNext();
            temp.setNext(current.getNext());
        }
        
        updateActionPerformed(evt);
    }//GEN-LAST:event_deletePlayerActionPerformed

    private ListNode mergeSort(ListNode a) {
        if (a == null || a.getNext() == null) {
            return a;
        }
        
        ListNode middle = getMiddle(a);
        ListNode next_of_middle = middle.getNext();
        
        middle.setNext(null);
        
        ListNode left = mergeSort(a);
        ListNode right = mergeSort(next_of_middle);
        
        ListNode sorted_list = sortedMerge(left, right);
        
        return sorted_list;
    }
    
    private static ListNode getMiddle(ListNode head) {
        if (head == null) return head;
        
        ListNode slow = head, fast = head;
        
        while(fast.getNext() != null && fast.getNext().getNext() != null) {
            slow = slow.getNext();
            fast = fast.getNext().getNext();
        }
        
        return slow;
    }
    
    private ListNode sortedMerge(ListNode a, ListNode b) {
        ListNode result = null;
        
        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }
        
        if (a.get().getPoints() >= b.get().getPoints()) {
            result = a;
            result.setNext(sortedMerge(a.getNext(), b));
        } else {
            result = b;
            result.setNext(sortedMerge(a, b.getNext()));
        }
        
        return result;
        
    }
    
    private void sortPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPointsActionPerformed
       lists[game_index] = mergeSort(lists[game_index]);
       updateActionPerformed(evt);
    }//GEN-LAST:event_sortPointsActionPerformed

    private void toggleEligibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleEligibilityActionPerformed
        if (eligibility_toggle) eligibility_toggle = false;
        else eligibility_toggle = true;
        System.out.println(eligibility_toggle);
        updateActionPerformed(evt);
    }//GEN-LAST:event_toggleEligibilityActionPerformed

    private void printGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printGamesActionPerformed
        DoubleNode current = games;
        while (current != null) {
            System.out.println(current);
            current = current.getNext();
        }
    }//GEN-LAST:event_printGamesActionPerformed

    private void gameSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameSelectActionPerformed
        System.out.println(gameSelect.getSelectedItem());
        game_index = gameSelect.getSelectedIndex();
        updateActionPerformed(evt);
    }//GEN-LAST:event_gameSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Scanner infile = null;
        int count = 0;
        for (int j = 0; j < 3; j++) {
            try
            {

              infile = new Scanner (new FileReader(filepaths[j]));
              count++;

              while (infile.hasNextLine()){
                  String line = infile.nextLine();
                  count++;

                  //System.out.println(line);

                  int i = 0;
                  int split = line.indexOf("|");
                  String name = line.substring(i, split);
                  //System.out.println(name);
                  i = split+1;
                  split = line.substring(i).indexOf("|") + name.length() + 1;
                  int grade = Integer.parseInt(line.substring(i, split));
                  //System.out.println(grade);
                  i = split+1;
                  int points = Integer.parseInt(line.substring(i, line.length()));
                  //System.out.println(points);

                  if (lists[j] == null) {
                      lists[j] = new ListNode(new Player(name, grade, points), null);
                      tails[j] = lists[j];
                  } else {
                      tails[j].setNext(new ListNode(new Player(name, grade, points), null));
                      tails[j] = tails[j].getNext();
                  }
              }

            } catch (FileNotFoundException e) {
                System.out.println("file not found");
            }
            catch(IOException e)
            {
               System.out.println("oops" + count);
            } 
        }
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGame;
    private javax.swing.JButton addPlayer;
    private javax.swing.JButton deletePlayer;
    private javax.swing.JComboBox<String> gameSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printGames;
    private javax.swing.JButton sortPoints;
    private javax.swing.JButton toggleEligibility;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
